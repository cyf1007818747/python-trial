from typing import List

# all the functions 1 - 7 below are written by yourself based on your recite of c++ repo version

# 1. find the index of any number equals to the key.
def binary_search_any_equal(arr: List[int], target: int) -> int:
    l, r = 0, len(arr) - 1
    mid = l

    while l <= r:
        mid = l + (r - l) // 2
        if target == arr[mid]:
            return mid
        # easy to make mistakes below: # *
        # // elif target < mid: 
        elif target < arr[mid]: 
            r = mid - 1
        else:
            l = mid + 1

    return -1

# 2. find the index of the first number equals to the key.
# this is actually a special case of 4.
def binary_search_first_equal(arr: List[int], target: int) -> int:
    l, r = 0, len(arr) - 1
    mid = l

    while l <= r:
        mid = l + (r - l) // 2
        if target <= arr[mid]:
            r = mid - 1
        else:
            l = mid + 1

    if l < len(arr) and arr[l] == target:
        return l
    
    return -1

# 3. find the index of the last number equals to the key.
# this is actually a special case of 5.
def binary_search_last_equal(arr: List[int], target: int) -> int:
    l, r = 0, len(arr) - 1
    mid = l

    while l <= r:
        mid = l + (r - l) // 2
        if target >= arr[mid]:
            l = mid + 1
        else:
            r = mid - 1

    if r >= 0 and arr[r] == target:
        return r
    
    return -1

# 4. find the index of the first number greater or equal to the key.
def binary_search_first_gteq(arr: List[int], target: int) -> int:
    l, r = 0, len(arr) - 1
    mid = l
    
    while l <= r:
        mid = l + (r - l) // 2
        if target <= arr[mid]:
            r = mid - 1
        else:
            l = mid + 1

    if l < len(arr):
        return l
    
    return -1

# 5. find the index of the last number less than or equal to the key.
def binary_search_last_leeq(arr: List[int], target: int) -> int:
    l, r = 0, len(arr) - 1
    mid = l

    while l <= r:
        mid = l + (r - l) // 2
        if target >= arr[mid]:
            l = mid + 1
        else:
            r = mid - 1

    if r >= 0:
        return r
    
    return -1

# TODO 6. find the index of the first number greater than the key.

# TODO 7. find the index of the last number less than the key.

# Testing function, generated by GPT
def test_binary_search_any_equal(binary_search_func):
    # Define a list of test cases
    test_cases = [
        ([0, 1, 2, 3, 4, 5], 1),  # Target at the beginning
        ([0, 1, 2, 3, 4, 5], 5),  # Target at the end
        ([0, 1, 2, 3, 4, 5], 3),  # Target in the middle
        ([0, 1, 2, 3, 4, 5], 6), # Target not present, value greater
        ([0, 1, 2, 3, 4, 5], 0), # Target not present, value lesser
        ([], 3),              # Empty list
        ([3], 3),              # Single-element list, target present
        ([3], 2),             # Single-element list, target absent
        ([0, 1, 1, 2, 2, 2], 2), # List with repeating elements, target present
        ([0, 0, 3, 3, 3, 5, 5], -1),
        ([0, 0, 3, 3, 3, 5, 5], 0),
        ([0, 0, 3, 3, 3, 5, 5], 2),
        ([0, 0, 3, 3, 3, 5, 5], 3),
        ([0, 0, 3, 3, 3, 5, 5], 4),
        ([0, 0, 3, 3, 3, 5, 5], 5),
        ([0, 0, 3, 3, 3, 5, 5], 6),
    ]

    # Run the test cases
    for arr, target in test_cases:
        result = binary_search_func(arr, target)
        print('arr:', arr, ', target:', target, ', index result:', result)
    

# main code
test_binary_search_any_equal(binary_search_last_leeq)